//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try font.validate()
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 colors.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 13 files.
  struct file {
    /// Resource file `BLEManagerAPIDoc.pdf`.
    static let bleManagerAPIDocPdf = Rswift.FileResource(bundle: R.hostingBundle, name: "BLEManagerAPIDoc", pathExtension: "pdf")
    /// Resource file `GoogleService-Info.plist`.
    static let googleServiceInfoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-Info", pathExtension: "plist")
    /// Resource file `Info.plist`.
    static let infoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "Info", pathExtension: "plist")
    /// Resource file `README.md`.
    static let readmeMd = Rswift.FileResource(bundle: R.hostingBundle, name: "README", pathExtension: "md")
    /// Resource file `README.txt`.
    static let readmeTxt = Rswift.FileResource(bundle: R.hostingBundle, name: "README", pathExtension: "txt")
    /// Resource file `ShareSDK.bundle`.
    static let shareSDKBundle = Rswift.FileResource(bundle: R.hostingBundle, name: "ShareSDK", pathExtension: "bundle")
    /// Resource file `ShareSDKUI.bundle`.
    static let shareSDKUIBundle = Rswift.FileResource(bundle: R.hostingBundle, name: "ShareSDKUI", pathExtension: "bundle")
    /// Resource file `SourceHanSans-Light.otf`.
    static let sourceHanSansLightOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SourceHanSans-Light", pathExtension: "otf")
    /// Resource file `WeiboSDK.bundle`.
    static let weiboSDKBundle = Rswift.FileResource(bundle: R.hostingBundle, name: "WeiboSDK", pathExtension: "bundle")
    /// Resource file `address.json`.
    static let addressJson = Rswift.FileResource(bundle: R.hostingBundle, name: "address", pathExtension: "json")
    /// Resource file `iconfont.ttf`.
    static let iconfontTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "iconfont", pathExtension: "ttf")
    /// Resource file `mui-icons-extra.ttf`.
    static let muiIconsExtraTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "mui-icons-extra", pathExtension: "ttf")
    /// Resource file `mui.ttf`.
    static let muiTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "mui", pathExtension: "ttf")
    
    /// `bundle.url(forResource: "BLEManagerAPIDoc", withExtension: "pdf")`
    static func bleManagerAPIDocPdf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.bleManagerAPIDocPdf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "GoogleService-Info", withExtension: "plist")`
    static func googleServiceInfoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleServiceInfoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Info", withExtension: "plist")`
    static func infoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.infoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "README", withExtension: "md")`
    static func readmeMd(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.readmeMd
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "README", withExtension: "txt")`
    static func readmeTxt(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.readmeTxt
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "ShareSDK", withExtension: "bundle")`
    static func shareSDKBundle(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.shareSDKBundle
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "ShareSDKUI", withExtension: "bundle")`
    static func shareSDKUIBundle(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.shareSDKUIBundle
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "SourceHanSans-Light", withExtension: "otf")`
    static func sourceHanSansLightOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sourceHanSansLightOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "WeiboSDK", withExtension: "bundle")`
    static func weiboSDKBundle(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.weiboSDKBundle
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "address", withExtension: "json")`
    static func addressJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.addressJson
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "iconfont", withExtension: "ttf")`
    static func iconfontTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.iconfontTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "mui", withExtension: "ttf")`
    static func muiTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.muiTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "mui-icons-extra", withExtension: "ttf")`
    static func muiIconsExtraTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.muiIconsExtraTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 4 fonts.
  struct font: Rswift.Validatable {
    /// Font `SourceHanSans-Light`.
    static let sourceHanSansLight = Rswift.FontResource(fontName: "SourceHanSans-Light")
    
    /// `UIFont(name: "SourceHanSans-Light", size: ...)`
    static func sourceHanSansLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sourceHanSansLight, size: size)
    }
    
    static func validate() throws {
      if R.font.sourceHanSansLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SourceHanSans-Light' could not be loaded, is 'SourceHanSans-Light.otf' added to the UIAppFonts array in this targets Info.plist?") }
    }
    
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 90 images.
  struct image {
    /// Image `AMCP_color_wheel`.
    static let amcp_color_wheel = Rswift.ImageResource(bundle: R.hostingBundle, name: "AMCP_color_wheel")
    /// Image `AMCP_cursor`.
    static let amcp_cursor = Rswift.ImageResource(bundle: R.hostingBundle, name: "AMCP_cursor")
    /// Image `BG1-1`.
    static let bg11 = Rswift.ImageResource(bundle: R.hostingBundle, name: "BG1-1")
    /// Image `Qrcode`.
    static let qrcode = Rswift.ImageResource(bundle: R.hostingBundle, name: "Qrcode")
    /// Image `arrow`.
    static let arrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrow")
    /// Image `back`.
    static let back = Rswift.ImageResource(bundle: R.hostingBundle, name: "back")
    /// Image `bg1`.
    static let bg1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg1")
    /// Image `bigIcon`.
    static let bigIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "bigIcon")
    /// Image `blueBG`.
    static let blueBG = Rswift.ImageResource(bundle: R.hostingBundle, name: "blueBG")
    /// Image `bluetouch`.
    static let bluetouch = Rswift.ImageResource(bundle: R.hostingBundle, name: "bluetouch")
    /// Image `btnBg`.
    static let btnBg = Rswift.ImageResource(bundle: R.hostingBundle, name: "btnBg")
    /// Image `checkBox1`.
    static let checkBox1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "checkBox1")
    /// Image `checkbox_0`.
    static let checkbox_0 = Rswift.ImageResource(bundle: R.hostingBundle, name: "checkbox_0")
    /// Image `checkbox_1`.
    static let checkbox_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "checkbox_1")
    /// Image `checkbox_selected1`.
    static let checkbox_selected1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "checkbox_selected1")
    /// Image `cleanBtn`.
    static let cleanBtn = Rswift.ImageResource(bundle: R.hostingBundle, name: "cleanBtn")
    /// Image `clean`.
    static let clean = Rswift.ImageResource(bundle: R.hostingBundle, name: "clean")
    /// Image `closeBtn`.
    static let closeBtn = Rswift.ImageResource(bundle: R.hostingBundle, name: "closeBtn")
    /// Image `collectionIcon`.
    static let collectionIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "collectionIcon")
    /// Image `comment-1`.
    static let comment1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "comment-1")
    /// Image `comment`.
    static let comment = Rswift.ImageResource(bundle: R.hostingBundle, name: "comment")
    /// Image `cup1`.
    static let cup1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "cup1")
    /// Image `cup2`.
    static let cup2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "cup2")
    /// Image `cup3`.
    static let cup3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "cup3")
    /// Image `cup4`.
    static let cup4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "cup4")
    /// Image `cup5`.
    static let cup5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "cup5")
    /// Image `cup`.
    static let cup = Rswift.ImageResource(bundle: R.hostingBundle, name: "cup")
    /// Image `default profile`.
    static let defaultProfile = Rswift.ImageResource(bundle: R.hostingBundle, name: "default profile")
    /// Image `device`.
    static let device = Rswift.ImageResource(bundle: R.hostingBundle, name: "device")
    /// Image `drinkIcon1`.
    static let drinkIcon1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "drinkIcon1")
    /// Image `empty`.
    static let empty = Rswift.ImageResource(bundle: R.hostingBundle, name: "empty")
    /// Image `hand`.
    static let hand = Rswift.ImageResource(bundle: R.hostingBundle, name: "hand")
    /// Image `health`.
    static let health = Rswift.ImageResource(bundle: R.hostingBundle, name: "health")
    /// Image `ic_more_down`.
    static let ic_more_down = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_more_down")
    /// Image `icon1`.
    static let icon1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon1")
    /// Image `icon2`.
    static let icon2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon2")
    /// Image `icon3`.
    static let icon3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon3")
    /// Image `icon4`.
    static let icon4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon4")
    /// Image `icon`.
    static let icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon")
    /// Image `lightBtn`.
    static let lightBtn = Rswift.ImageResource(bundle: R.hostingBundle, name: "lightBtn")
    /// Image `lightPowerBtnD`.
    static let lightPowerBtnD = Rswift.ImageResource(bundle: R.hostingBundle, name: "lightPowerBtnD")
    /// Image `lightPowerBtn`.
    static let lightPowerBtn = Rswift.ImageResource(bundle: R.hostingBundle, name: "lightPowerBtn")
    /// Image `lightUI1`.
    static let lightUI1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "lightUI1")
    /// Image `lightUI2`.
    static let lightUI2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "lightUI2")
    /// Image `light`.
    static let light = Rswift.ImageResource(bundle: R.hostingBundle, name: "light")
    /// Image `likeIcon`.
    static let likeIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "likeIcon")
    /// Image `like`.
    static let like = Rswift.ImageResource(bundle: R.hostingBundle, name: "like")
    /// Image `loading`.
    static let loading = Rswift.ImageResource(bundle: R.hostingBundle, name: "loading")
    /// Image `more`.
    static let more = Rswift.ImageResource(bundle: R.hostingBundle, name: "more")
    /// Image `msgBtn`.
    static let msgBtn = Rswift.ImageResource(bundle: R.hostingBundle, name: "msgBtn")
    /// Image `msgIcon`.
    static let msgIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "msgIcon")
    /// Image `numerous`.
    static let numerous = Rswift.ImageResource(bundle: R.hostingBundle, name: "numerous")
    /// Image `powerOff`.
    static let powerOff = Rswift.ImageResource(bundle: R.hostingBundle, name: "powerOff")
    /// Image `powerOn`.
    static let powerOn = Rswift.ImageResource(bundle: R.hostingBundle, name: "powerOn")
    /// Image `profileIcon`.
    static let profileIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "profileIcon")
    /// Image `qingpopo-80`.
    static let qingpopo80 = Rswift.ImageResource(bundle: R.hostingBundle, name: "qingpopo-80")
    /// Image `qingpopo`.
    static let qingpopo = Rswift.ImageResource(bundle: R.hostingBundle, name: "qingpopo")
    /// Image `qq-1`.
    static let qq1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "qq-1")
    /// Image `qq`.
    static let qq = Rswift.ImageResource(bundle: R.hostingBundle, name: "qq")
    /// Image `qrcode-1`.
    static let qrcode1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "qrcode-1")
    /// Image `sick2`.
    static let sick2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "sick2")
    /// Image `sick`.
    static let sick = Rswift.ImageResource(bundle: R.hostingBundle, name: "sick")
    /// Image `sina0`.
    static let sina0 = Rswift.ImageResource(bundle: R.hostingBundle, name: "sina0")
    /// Image `sina`.
    static let sina = Rswift.ImageResource(bundle: R.hostingBundle, name: "sina")
    /// Image `slider_b`.
    static let slider_b = Rswift.ImageResource(bundle: R.hostingBundle, name: "slider_b")
    /// Image `slider`.
    static let slider = Rswift.ImageResource(bundle: R.hostingBundle, name: "slider")
    /// Image `star`.
    static let star = Rswift.ImageResource(bundle: R.hostingBundle, name: "star")
    /// Image `unStar`.
    static let unStar = Rswift.ImageResource(bundle: R.hostingBundle, name: "unStar")
    /// Image `unlike`.
    static let unlike = Rswift.ImageResource(bundle: R.hostingBundle, name: "unlike")
    /// Image `wechat`.
    static let wechat = Rswift.ImageResource(bundle: R.hostingBundle, name: "wechat")
    /// Image `weixin`.
    static let weixin = Rswift.ImageResource(bundle: R.hostingBundle, name: "weixin")
    /// Image `wifi_select`.
    static let wifi_select = Rswift.ImageResource(bundle: R.hostingBundle, name: "wifi_select")
    /// Image `wifi`.
    static let wifi = Rswift.ImageResource(bundle: R.hostingBundle, name: "wifi")
    /// Image `写评论`.
    static let 写评论 = Rswift.ImageResource(bundle: R.hostingBundle, name: "写评论")
    /// Image `分享`.
    static let 分享 = Rswift.ImageResource(bundle: R.hostingBundle, name: "分享")
    /// Image `资源 10`.
    static let 资源10 = Rswift.ImageResource(bundle: R.hostingBundle, name: "资源 10")
    /// Image `资源 11`.
    static let 资源11 = Rswift.ImageResource(bundle: R.hostingBundle, name: "资源 11")
    /// Image `资源 12`.
    static let 资源12 = Rswift.ImageResource(bundle: R.hostingBundle, name: "资源 12")
    /// Image `资源 13`.
    static let 资源13 = Rswift.ImageResource(bundle: R.hostingBundle, name: "资源 13")
    /// Image `资源 14`.
    static let 资源14 = Rswift.ImageResource(bundle: R.hostingBundle, name: "资源 14")
    /// Image `资源 15`.
    static let 资源15 = Rswift.ImageResource(bundle: R.hostingBundle, name: "资源 15")
    /// Image `资源 16`.
    static let 资源16 = Rswift.ImageResource(bundle: R.hostingBundle, name: "资源 16")
    /// Image `资源 17`.
    static let 资源17 = Rswift.ImageResource(bundle: R.hostingBundle, name: "资源 17")
    /// Image `资源 18`.
    static let 资源18 = Rswift.ImageResource(bundle: R.hostingBundle, name: "资源 18")
    /// Image `资源 19`.
    static let 资源19 = Rswift.ImageResource(bundle: R.hostingBundle, name: "资源 19")
    /// Image `资源 20`.
    static let 资源20 = Rswift.ImageResource(bundle: R.hostingBundle, name: "资源 20")
    /// Image `资源 21`.
    static let 资源21 = Rswift.ImageResource(bundle: R.hostingBundle, name: "资源 21")
    /// Image `资源 22`.
    static let 资源22 = Rswift.ImageResource(bundle: R.hostingBundle, name: "资源 22")
    /// Image `资源 23`.
    static let 资源23 = Rswift.ImageResource(bundle: R.hostingBundle, name: "资源 23")
    /// Image `资源 2`.
    static let 资源2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "资源 2")
    
    /// `UIImage(named: "AMCP_color_wheel", bundle: ..., traitCollection: ...)`
    static func amcp_color_wheel(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.amcp_color_wheel, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "AMCP_cursor", bundle: ..., traitCollection: ...)`
    static func amcp_cursor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.amcp_cursor, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "BG1-1", bundle: ..., traitCollection: ...)`
    static func bg11(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg11, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Qrcode", bundle: ..., traitCollection: ...)`
    static func qrcode(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qrcode, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "arrow", bundle: ..., traitCollection: ...)`
    static func arrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrow, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "back", bundle: ..., traitCollection: ...)`
    static func back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.back, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bg1", bundle: ..., traitCollection: ...)`
    static func bg1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bigIcon", bundle: ..., traitCollection: ...)`
    static func bigIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bigIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "blueBG", bundle: ..., traitCollection: ...)`
    static func blueBG(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.blueBG, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bluetouch", bundle: ..., traitCollection: ...)`
    static func bluetouch(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bluetouch, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btnBg", bundle: ..., traitCollection: ...)`
    static func btnBg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btnBg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "checkBox1", bundle: ..., traitCollection: ...)`
    static func checkBox1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.checkBox1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "checkbox_0", bundle: ..., traitCollection: ...)`
    static func checkbox_0(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.checkbox_0, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "checkbox_1", bundle: ..., traitCollection: ...)`
    static func checkbox_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.checkbox_1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "checkbox_selected1", bundle: ..., traitCollection: ...)`
    static func checkbox_selected1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.checkbox_selected1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "clean", bundle: ..., traitCollection: ...)`
    static func clean(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.clean, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "cleanBtn", bundle: ..., traitCollection: ...)`
    static func cleanBtn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cleanBtn, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "closeBtn", bundle: ..., traitCollection: ...)`
    static func closeBtn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.closeBtn, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "collectionIcon", bundle: ..., traitCollection: ...)`
    static func collectionIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.collectionIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "comment", bundle: ..., traitCollection: ...)`
    static func comment(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.comment, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "comment-1", bundle: ..., traitCollection: ...)`
    static func comment1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.comment1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "cup", bundle: ..., traitCollection: ...)`
    static func cup(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cup, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "cup1", bundle: ..., traitCollection: ...)`
    static func cup1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cup1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "cup2", bundle: ..., traitCollection: ...)`
    static func cup2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cup2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "cup3", bundle: ..., traitCollection: ...)`
    static func cup3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cup3, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "cup4", bundle: ..., traitCollection: ...)`
    static func cup4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cup4, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "cup5", bundle: ..., traitCollection: ...)`
    static func cup5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cup5, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "default profile", bundle: ..., traitCollection: ...)`
    static func defaultProfile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.defaultProfile, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "device", bundle: ..., traitCollection: ...)`
    static func device(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.device, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "drinkIcon1", bundle: ..., traitCollection: ...)`
    static func drinkIcon1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.drinkIcon1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "empty", bundle: ..., traitCollection: ...)`
    static func empty(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.empty, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "hand", bundle: ..., traitCollection: ...)`
    static func hand(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hand, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "health", bundle: ..., traitCollection: ...)`
    static func health(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.health, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_more_down", bundle: ..., traitCollection: ...)`
    static func ic_more_down(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_more_down, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon", bundle: ..., traitCollection: ...)`
    static func icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon1", bundle: ..., traitCollection: ...)`
    static func icon1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon2", bundle: ..., traitCollection: ...)`
    static func icon2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon3", bundle: ..., traitCollection: ...)`
    static func icon3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon3, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon4", bundle: ..., traitCollection: ...)`
    static func icon4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon4, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "light", bundle: ..., traitCollection: ...)`
    static func light(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.light, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "lightBtn", bundle: ..., traitCollection: ...)`
    static func lightBtn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lightBtn, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "lightPowerBtn", bundle: ..., traitCollection: ...)`
    static func lightPowerBtn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lightPowerBtn, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "lightPowerBtnD", bundle: ..., traitCollection: ...)`
    static func lightPowerBtnD(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lightPowerBtnD, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "lightUI1", bundle: ..., traitCollection: ...)`
    static func lightUI1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lightUI1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "lightUI2", bundle: ..., traitCollection: ...)`
    static func lightUI2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lightUI2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "like", bundle: ..., traitCollection: ...)`
    static func like(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.like, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "likeIcon", bundle: ..., traitCollection: ...)`
    static func likeIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.likeIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "loading", bundle: ..., traitCollection: ...)`
    static func loading(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.loading, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "more", bundle: ..., traitCollection: ...)`
    static func more(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.more, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "msgBtn", bundle: ..., traitCollection: ...)`
    static func msgBtn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.msgBtn, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "msgIcon", bundle: ..., traitCollection: ...)`
    static func msgIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.msgIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "numerous", bundle: ..., traitCollection: ...)`
    static func numerous(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.numerous, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "powerOff", bundle: ..., traitCollection: ...)`
    static func powerOff(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.powerOff, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "powerOn", bundle: ..., traitCollection: ...)`
    static func powerOn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.powerOn, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "profileIcon", bundle: ..., traitCollection: ...)`
    static func profileIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profileIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "qingpopo", bundle: ..., traitCollection: ...)`
    static func qingpopo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qingpopo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "qingpopo-80", bundle: ..., traitCollection: ...)`
    static func qingpopo80(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qingpopo80, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "qq", bundle: ..., traitCollection: ...)`
    static func qq(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qq, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "qq-1", bundle: ..., traitCollection: ...)`
    static func qq1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qq1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "qrcode-1", bundle: ..., traitCollection: ...)`
    static func qrcode1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qrcode1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "sick", bundle: ..., traitCollection: ...)`
    static func sick(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sick, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "sick2", bundle: ..., traitCollection: ...)`
    static func sick2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sick2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "sina", bundle: ..., traitCollection: ...)`
    static func sina(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sina, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "sina0", bundle: ..., traitCollection: ...)`
    static func sina0(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sina0, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "slider", bundle: ..., traitCollection: ...)`
    static func slider(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.slider, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "slider_b", bundle: ..., traitCollection: ...)`
    static func slider_b(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.slider_b, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "star", bundle: ..., traitCollection: ...)`
    static func star(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.star, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "unStar", bundle: ..., traitCollection: ...)`
    static func unStar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.unStar, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "unlike", bundle: ..., traitCollection: ...)`
    static func unlike(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.unlike, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "wechat", bundle: ..., traitCollection: ...)`
    static func wechat(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wechat, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "weixin", bundle: ..., traitCollection: ...)`
    static func weixin(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.weixin, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "wifi", bundle: ..., traitCollection: ...)`
    static func wifi(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wifi, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "wifi_select", bundle: ..., traitCollection: ...)`
    static func wifi_select(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wifi_select, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "写评论", bundle: ..., traitCollection: ...)`
    static func 写评论(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.写评论, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "分享", bundle: ..., traitCollection: ...)`
    static func 分享(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.分享, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "资源 10", bundle: ..., traitCollection: ...)`
    static func 资源10(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.资源10, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "资源 11", bundle: ..., traitCollection: ...)`
    static func 资源11(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.资源11, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "资源 12", bundle: ..., traitCollection: ...)`
    static func 资源12(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.资源12, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "资源 13", bundle: ..., traitCollection: ...)`
    static func 资源13(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.资源13, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "资源 14", bundle: ..., traitCollection: ...)`
    static func 资源14(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.资源14, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "资源 15", bundle: ..., traitCollection: ...)`
    static func 资源15(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.资源15, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "资源 16", bundle: ..., traitCollection: ...)`
    static func 资源16(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.资源16, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "资源 17", bundle: ..., traitCollection: ...)`
    static func 资源17(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.资源17, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "资源 18", bundle: ..., traitCollection: ...)`
    static func 资源18(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.资源18, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "资源 19", bundle: ..., traitCollection: ...)`
    static func 资源19(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.资源19, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "资源 2", bundle: ..., traitCollection: ...)`
    static func 资源2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.资源2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "资源 20", bundle: ..., traitCollection: ...)`
    static func 资源20(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.资源20, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "资源 21", bundle: ..., traitCollection: ...)`
    static func 资源21(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.资源21, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "资源 22", bundle: ..., traitCollection: ...)`
    static func 资源22(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.资源22, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "资源 23", bundle: ..., traitCollection: ...)`
    static func 资源23(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.资源23, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 0 nibs.
  struct nib {
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 28 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `AddDevice`.
    static let addDevice: Rswift.ReuseIdentifier<AddDeviceCell> = Rswift.ReuseIdentifier(identifier: "AddDevice")
    /// Reuse identifier `AddressCell`.
    static let addressCell: Rswift.ReuseIdentifier<AddressCell> = Rswift.ReuseIdentifier(identifier: "AddressCell")
    /// Reuse identifier `CommentMsgCell`.
    static let commentMsgCell: Rswift.ReuseIdentifier<CommentMsgCell> = Rswift.ReuseIdentifier(identifier: "CommentMsgCell")
    /// Reuse identifier `CreditsOrderCell`.
    static let creditsOrderCell: Rswift.ReuseIdentifier<CreditsOrderCell> = Rswift.ReuseIdentifier(identifier: "CreditsOrderCell")
    /// Reuse identifier `Crowdfunding2Cell`.
    static let crowdfunding2Cell: Rswift.ReuseIdentifier<Crowdfunding2Cell> = Rswift.ReuseIdentifier(identifier: "Crowdfunding2Cell")
    /// Reuse identifier `CrowdfundingCell`.
    static let crowdfundingCell: Rswift.ReuseIdentifier<CrowdfundingCell> = Rswift.ReuseIdentifier(identifier: "CrowdfundingCell")
    /// Reuse identifier `CrowdfundingOrderCell`.
    static let crowdfundingOrderCell: Rswift.ReuseIdentifier<CrowdfundingOrderCell> = Rswift.ReuseIdentifier(identifier: "CrowdfundingOrderCell")
    /// Reuse identifier `Device`.
    static let device: Rswift.ReuseIdentifier<DeviceCell> = Rswift.ReuseIdentifier(identifier: "Device")
    /// Reuse identifier `DrinkNoticeCell`.
    static let drinkNoticeCell: Rswift.ReuseIdentifier<DrinkNoticeCell> = Rswift.ReuseIdentifier(identifier: "DrinkNoticeCell")
    /// Reuse identifier `ExchangeOrderCell`.
    static let exchangeOrderCell: Rswift.ReuseIdentifier<ExchangeOrderCell> = Rswift.ReuseIdentifier(identifier: "ExchangeOrderCell")
    /// Reuse identifier `FansCell`.
    static let fansCell: Rswift.ReuseIdentifier<FansCell> = Rswift.ReuseIdentifier(identifier: "FansCell")
    /// Reuse identifier `MsgBarCell`.
    static let msgBarCell: Rswift.ReuseIdentifier<MsgBarCell> = Rswift.ReuseIdentifier(identifier: "MsgBarCell")
    /// Reuse identifier `NewCommentMsgCell`.
    static let newCommentMsgCell: Rswift.ReuseIdentifier<NewCommentMsgCell> = Rswift.ReuseIdentifier(identifier: "NewCommentMsgCell")
    /// Reuse identifier `OldExchangeCell`.
    static let oldExchangeCell: Rswift.ReuseIdentifier<OldExchangeCell> = Rswift.ReuseIdentifier(identifier: "OldExchangeCell")
    /// Reuse identifier `Post`.
    static let post: Rswift.ReuseIdentifier<PostTableViewCell> = Rswift.ReuseIdentifier(identifier: "Post")
    /// Reuse identifier `ReplyCommentMsgCell`.
    static let replyCommentMsgCell: Rswift.ReuseIdentifier<ReplyCommentMsgCell> = Rswift.ReuseIdentifier(identifier: "ReplyCommentMsgCell")
    /// Reuse identifier `ScoresShopCell`.
    static let scoresShopCell: Rswift.ReuseIdentifier<ScoresShopCell> = Rswift.ReuseIdentifier(identifier: "ScoresShopCell")
    /// Reuse identifier `SysLb`.
    static let sysLb: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: "SysLb")
    /// Reuse identifier `SysMsgCell`.
    static let sysMsgCell: Rswift.ReuseIdentifier<SysMsgCell> = Rswift.ReuseIdentifier(identifier: "SysMsgCell")
    /// Reuse identifier `authorCell`.
    static let authorCell: Rswift.ReuseIdentifier<AuthorBlogCell> = Rswift.ReuseIdentifier(identifier: "authorCell")
    /// Reuse identifier `btnCell`.
    static let btnCell: Rswift.ReuseIdentifier<PostBtnCell> = Rswift.ReuseIdentifier(identifier: "btnCell")
    /// Reuse identifier `cell`.
    static let cell: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: "cell")
    /// Reuse identifier `comment`.
    static let comment: Rswift.ReuseIdentifier<CommentTableViewCell> = Rswift.ReuseIdentifier(identifier: "comment")
    /// Reuse identifier `labelCell`.
    static let labelCell: Rswift.ReuseIdentifier<BaseBlogCell> = Rswift.ReuseIdentifier(identifier: "labelCell")
    /// Reuse identifier `separateCell`.
    static let separateCell: Rswift.ReuseIdentifier<BaseBlogCell> = Rswift.ReuseIdentifier(identifier: "separateCell")
    /// Reuse identifier `subComment`.
    static let subComment: Rswift.ReuseIdentifier<SubCommentTableViewCell> = Rswift.ReuseIdentifier(identifier: "subComment")
    /// Reuse identifier `titleCell`.
    static let titleCell: Rswift.ReuseIdentifier<TitleBlogCell> = Rswift.ReuseIdentifier(identifier: "titleCell")
    /// Reuse identifier `webCell`.
    static let webCell: Rswift.ReuseIdentifier<WebViewCell> = Rswift.ReuseIdentifier(identifier: "webCell")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 10 view controllers.
  struct segue {
    /// This struct is generated for `AddressListVC`, and contains static references to 1 segues.
    struct addressListVC {
      /// Segue identifier `editAddress`.
      static let editAddress: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, AddressListVC, AddressInfoVC> = Rswift.StoryboardSegueIdentifier(identifier: "editAddress")
      
      /// Optionally returns a typed version of segue `editAddress`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func editAddress(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, AddressListVC, AddressInfoVC>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.addressListVC.editAddress, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `DeviceInfoVC`, and contains static references to 3 segues.
    struct deviceInfoVC {
      /// Segue identifier `changeCupName`.
      static let changeCupName: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, DeviceInfoVC, ChangeDeviceNameVC> = Rswift.StoryboardSegueIdentifier(identifier: "changeCupName")
      /// Segue identifier `sginUp`.
      static let sginUp: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, DeviceInfoVC, SignUpCup> = Rswift.StoryboardSegueIdentifier(identifier: "sginUp")
      /// Segue identifier `signUp`.
      static let signUp: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, DeviceInfoVC, SignUpCup> = Rswift.StoryboardSegueIdentifier(identifier: "signUp")
      
      /// Optionally returns a typed version of segue `changeCupName`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func changeCupName(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, DeviceInfoVC, ChangeDeviceNameVC>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.deviceInfoVC.changeCupName, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `sginUp`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func sginUp(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, DeviceInfoVC, SignUpCup>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.deviceInfoVC.sginUp, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `signUp`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func signUp(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, DeviceInfoVC, SignUpCup>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.deviceInfoVC.signUp, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `DrinkViewController`, and contains static references to 2 segues.
    struct drinkViewController {
      /// Segue identifier `clean`.
      static let clean: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, DrinkViewController, CleanCupViewController> = Rswift.StoryboardSegueIdentifier(identifier: "clean")
      /// Segue identifier `light`.
      static let light: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, DrinkViewController, ColorPicker> = Rswift.StoryboardSegueIdentifier(identifier: "light")
      
      /// Optionally returns a typed version of segue `clean`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func clean(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, DrinkViewController, CleanCupViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.drinkViewController.clean, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `light`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func light(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, DrinkViewController, ColorPicker>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.drinkViewController.light, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `InfosViewController`, and contains static references to 1 segues.
    struct infosViewController {
      /// Segue identifier `EmbedSegue`.
      static let embedSegue: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, InfosViewController, PostListViewController> = Rswift.StoryboardSegueIdentifier(identifier: "EmbedSegue")
      
      /// Optionally returns a typed version of segue `EmbedSegue`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func embedSegue(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, InfosViewController, PostListViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.infosViewController.embedSegue, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `MessageViewController`, and contains static references to 4 segues.
    struct messageViewController {
      /// Segue identifier `SysMsgDetail`.
      static let sysMsgDetail: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MessageViewController, PostDetailController> = Rswift.StoryboardSegueIdentifier(identifier: "SysMsgDetail")
      /// Segue identifier `commentDetail`.
      static let commentDetail: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MessageViewController, MyCommentListController> = Rswift.StoryboardSegueIdentifier(identifier: "commentDetail")
      /// Segue identifier `newCommentDetail`.
      static let newCommentDetail: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MessageViewController, NewMsgListController> = Rswift.StoryboardSegueIdentifier(identifier: "newCommentDetail")
      /// Segue identifier `showLikePost`.
      static let showLikePost: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MessageViewController, PostListViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showLikePost")
      
      /// Optionally returns a typed version of segue `SysMsgDetail`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func sysMsgDetail(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MessageViewController, PostDetailController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.messageViewController.sysMsgDetail, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `commentDetail`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func commentDetail(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MessageViewController, MyCommentListController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.messageViewController.commentDetail, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `newCommentDetail`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func newCommentDetail(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MessageViewController, NewMsgListController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.messageViewController.newCommentDetail, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `showLikePost`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showLikePost(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MessageViewController, PostListViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.messageViewController.showLikePost, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `MyFansList`, and contains static references to 1 segues.
    struct myFansList {
      /// Segue identifier `showSomeOnesPost`.
      static let showSomeOnesPost: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MyFansList, PostListViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showSomeOnesPost")
      
      /// Optionally returns a typed version of segue `showSomeOnesPost`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showSomeOnesPost(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MyFansList, PostListViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.myFansList.showSomeOnesPost, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `MyProfileTableVC`, and contains static references to 3 segues.
    struct myProfileTableVC {
      /// Segue identifier `collectionPosts`.
      static let collectionPosts: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MyProfileTableVC, PostListViewController> = Rswift.StoryboardSegueIdentifier(identifier: "collectionPosts")
      /// Segue identifier `showFans`.
      static let showFans: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MyProfileTableVC, MyFansList> = Rswift.StoryboardSegueIdentifier(identifier: "showFans")
      /// Segue identifier `showMyFollows`.
      static let showMyFollows: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MyProfileTableVC, MyFansList> = Rswift.StoryboardSegueIdentifier(identifier: "showMyFollows")
      
      /// Optionally returns a typed version of segue `collectionPosts`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func collectionPosts(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MyProfileTableVC, PostListViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.myProfileTableVC.collectionPosts, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `showFans`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showFans(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MyProfileTableVC, MyFansList>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.myProfileTableVC.showFans, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `showMyFollows`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showMyFollows(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MyProfileTableVC, MyFansList>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.myProfileTableVC.showMyFollows, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `MyProfileViewController`, and contains static references to 2 segues.
    struct myProfileViewController {
      /// Segue identifier `followingPosts`.
      static let followingPosts: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MyProfileViewController, PostListViewController> = Rswift.StoryboardSegueIdentifier(identifier: "followingPosts")
      /// Segue identifier `history`.
      static let history: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MyProfileViewController, PostListViewController> = Rswift.StoryboardSegueIdentifier(identifier: "history")
      
      /// Optionally returns a typed version of segue `followingPosts`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func followingPosts(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MyProfileViewController, PostListViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.myProfileViewController.followingPosts, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `history`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func history(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MyProfileViewController, PostListViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.myProfileViewController.history, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `OrderListTopVC`, and contains static references to 1 segues.
    struct orderListTopVC {
      /// Segue identifier `EmbedSegue`.
      static let embedSegue: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, OrderListTopVC, OrderListVC> = Rswift.StoryboardSegueIdentifier(identifier: "EmbedSegue")
      
      /// Optionally returns a typed version of segue `EmbedSegue`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func embedSegue(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, OrderListTopVC, OrderListVC>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.orderListTopVC.embedSegue, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `PostListViewController`, and contains static references to 1 segues.
    struct postListViewController {
      /// Segue identifier `showDetail`.
      static let showDetail: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, PostListViewController, UIKit.UINavigationController> = Rswift.StoryboardSegueIdentifier(identifier: "showDetail")
      
      /// Optionally returns a typed version of segue `showDetail`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showDetail(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, PostListViewController, UIKit.UINavigationController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.postListViewController.showDetail, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 3 storyboards.
  struct storyboard {
    /// Storyboard `AttachmentDetailsViewController`.
    static let attachmentDetailsViewController = _R.storyboard.attachmentDetailsViewController()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Shop`.
    static let shop = _R.storyboard.shop()
    
    /// `UIStoryboard(name: "AttachmentDetailsViewController", bundle: ...)`
    static func attachmentDetailsViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.attachmentDetailsViewController)
    }
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Shop", bundle: ...)`
    static func shop(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.shop)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 112 localization keys.
    struct localizable {
      /// zh-Hans translation: Email或者密码错误
      /// 
      /// Locales: zh-Hans, en
      static let email或者密码错误 = Rswift.StringResource(key: "Email或者密码错误", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 今天喝水统计
      /// 
      /// Locales: zh-Hans, en
      static let 今天喝水统计 = Rswift.StringResource(key: "今天喝水统计", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 保存
      /// 
      /// Locales: zh-Hans, en
      static let 保存 = Rswift.StringResource(key: "保存", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 保存失败
      /// 
      /// Locales: zh-Hans, en
      static let 保存失败 = Rswift.StringResource(key: "保存失败", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 保存成功
      /// 
      /// Locales: zh-Hans, en
      static let 保存成功 = Rswift.StringResource(key: "保存成功", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 停止电解
      /// 
      /// Locales: zh-Hans, en
      static let 停止电解 = Rswift.StringResource(key: "停止电解", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 元
      /// 
      /// Locales: zh-Hans, en
      static let 元 = Rswift.StringResource(key: "元", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 关注话题
      /// 
      /// Locales: zh-Hans, en
      static let 关注话题 = Rswift.StringResource(key: "关注话题", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 删除
      /// 
      /// Locales: zh-Hans, en
      static let 删除 = Rswift.StringResource(key: "删除", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 刷新中...
      /// 
      /// Locales: zh-Hans, en
      static let 刷新中 = Rswift.StringResource(key: "刷新中", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 发布成功
      /// 
      /// Locales: zh-Hans, en
      static let 发布成功 = Rswift.StringResource(key: "发布成功", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 取消
      /// 
      /// Locales: zh-Hans, en
      static let cancel = Rswift.StringResource(key: "Cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 取消
      /// 
      /// Locales: zh-Hans, en
      static let 取消 = Rswift.StringResource(key: "取消", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 可以使用新版本的氢泡泡应用程序，请更新至版本 
      /// 
      /// Locales: zh-Hans, en
      static let 可以使用新版本的氢泡泡应用程序请更新至版本 = Rswift.StringResource(key: "可以使用新版本的氢泡泡应用程序，请更新至版本 ", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 名字不能为空
      /// 
      /// Locales: zh-Hans, en
      static let 名字不能为空 = Rswift.StringResource(key: "名字不能为空", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 喝水量
      /// 
      /// Locales: zh-Hans, en
      static let 喝水量 = Rswift.StringResource(key: "喝水量", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 回复: 
      /// 
      /// Locales: zh-Hans, en
      static let 回复 = Rswift.StringResource(key: "回复:", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 天
      /// 
      /// Locales: zh-Hans, en
      static let 天 = Rswift.StringResource(key: "天", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 如果不知道是什么版本？
      /// 
      /// Locales: zh-Hans, en
      static let 如果不知道是什么版本 = Rswift.StringResource(key: "如果不知道是什么版本？", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 已授权
      /// 
      /// Locales: zh-Hans, en
      static let 已授权 = Rswift.StringResource(key: "已授权", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 已激活
      /// 
      /// Locales: zh-Hans, en
      static let 已激活 = Rswift.StringResource(key: "已激活", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 已签到
      /// 
      /// Locales: zh-Hans, en
      static let 已签到 = Rswift.StringResource(key: "已签到", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 已经发送重置密码的链接到您的E-mail
      /// 
      /// Locales: zh-Hans, en
      static let 已经发送重置密码的链接到您的EMail = Rswift.StringResource(key: "已经发送重置密码的链接到您的E-mail", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 已连接
      /// 
      /// Locales: zh-Hans, en
      static let 已连接 = Rswift.StringResource(key: "已连接", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 开始电解
      /// 
      /// Locales: zh-Hans, en
      static let 开始电解 = Rswift.StringResource(key: "开始电解", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 忽略此版本
      /// 
      /// Locales: zh-Hans, en
      static let 忽略此版本 = Rswift.StringResource(key: "忽略此版本", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 总喝水量
      /// 
      /// Locales: zh-Hans, en
      static let 总喝水量 = Rswift.StringResource(key: "总喝水量", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 您的E-mail未注册
      /// 
      /// Locales: zh-Hans, en
      static let 您的EMail未注册 = Rswift.StringResource(key: "您的E-mail未注册", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 我的关注
      /// 
      /// Locales: zh-Hans, en
      static let 我的关注 = Rswift.StringResource(key: "我的关注", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 我的收藏
      /// 
      /// Locales: zh-Hans, en
      static let 我的收藏 = Rswift.StringResource(key: "我的收藏", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 我的粉丝
      /// 
      /// Locales: zh-Hans, en
      static let 我的粉丝 = Rswift.StringResource(key: "我的粉丝", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 我的评论
      /// 
      /// Locales: zh-Hans, en
      static let 我的评论 = Rswift.StringResource(key: "我的评论", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 手动输入
      /// 
      /// Locales: zh-Hans, en
      static let 手动输入 = Rswift.StringResource(key: "手动输入", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 拍照
      /// 
      /// Locales: zh-Hans, en
      static let camera = Rswift.StringResource(key: "Camera", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 探索
      /// 
      /// Locales: zh-Hans, en
      static let 探索 = Rswift.StringResource(key: "探索", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 提示
      /// 
      /// Locales: zh-Hans, en
      static let 提示 = Rswift.StringResource(key: "提示", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 数据同步中
      /// 
      /// Locales: zh-Hans, en
      static let 数据同步中 = Rswift.StringResource(key: "数据同步中", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 新增
      /// 
      /// Locales: zh-Hans, en
      static let 新增 = Rswift.StringResource(key: "新增", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 新手机号码与当前号码相同!
      /// 
      /// Locales: zh-Hans, en
      static let 新手机号码与当前号码相同 = Rswift.StringResource(key: "新手机号码与当前号码相同!", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 新的评论
      /// 
      /// Locales: zh-Hans, en
      static let 新的评论 = Rswift.StringResource(key: "新的评论", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 新获得的赞
      /// 
      /// Locales: zh-Hans, en
      static let 新获得的赞 = Rswift.StringResource(key: "新获得的赞", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 星期一
      /// 
      /// Locales: zh-Hans, en
      static let 星期一 = Rswift.StringResource(key: "星期一", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 星期三
      /// 
      /// Locales: zh-Hans, en
      static let 星期三 = Rswift.StringResource(key: "星期三", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 星期二
      /// 
      /// Locales: zh-Hans, en
      static let 星期二 = Rswift.StringResource(key: "星期二", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 星期五
      /// 
      /// Locales: zh-Hans, en
      static let 星期五 = Rswift.StringResource(key: "星期五", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 星期六
      /// 
      /// Locales: zh-Hans, en
      static let 星期六 = Rswift.StringResource(key: "星期六", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 星期四
      /// 
      /// Locales: zh-Hans, en
      static let 星期四 = Rswift.StringResource(key: "星期四", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 星期日
      /// 
      /// Locales: zh-Hans, en
      static let 星期日 = Rswift.StringResource(key: "星期日", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 是否断开连接?
      /// 
      /// Locales: zh-Hans, en
      static let 是否断开连接 = Rswift.StringResource(key: "是否断开连接?", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 更新
      /// 
      /// Locales: zh-Hans, en
      static let 更新 = Rswift.StringResource(key: "更新", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 最新收藏
      /// 
      /// Locales: zh-Hans, en
      static let 最新收藏 = Rswift.StringResource(key: "最新收藏", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 最近一次喝水时间
      /// 
      /// Locales: zh-Hans, en
      static let 最近一次喝水时间 = Rswift.StringResource(key: "最近一次喝水时间", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 未授权
      /// 
      /// Locales: zh-Hans, en
      static let 未授权 = Rswift.StringResource(key: "未授权", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 未连接
      /// 
      /// Locales: zh-Hans, en
      static let 未连接 = Rswift.StringResource(key: "未连接", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 本周喝水状况
      /// 
      /// Locales: zh-Hans, en
      static let 本周喝水状况 = Rswift.StringResource(key: "本周喝水状况", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 本周喝水统计
      /// 
      /// Locales: zh-Hans, en
      static let 本周喝水统计 = Rswift.StringResource(key: "本周喝水统计", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 本月喝水状况
      /// 
      /// Locales: zh-Hans, en
      static let 本月喝水状况 = Rswift.StringResource(key: "本月喝水状况", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 本月喝水统计
      /// 
      /// Locales: zh-Hans, en
      static let 本月喝水统计 = Rswift.StringResource(key: "本月喝水统计", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 杯
      /// 
      /// Locales: zh-Hans, en
      static let 杯 = Rswift.StringResource(key: "杯", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 杯子已经被其他账号绑定
      /// 
      /// Locales: zh-Hans, en
      static let 杯子已经被其他账号绑定 = Rswift.StringResource(key: "杯子已经被其他账号绑定", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 杯子连接网络超时，请确定wifi密码后重试
      /// 
      /// Locales: zh-Hans, en
      static let 杯子连接网络超时请确定wifi密码后重试 = Rswift.StringResource(key: "杯子连接网络超时，请确定wifi密码后重试", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 杯子颜色
      /// 
      /// Locales: zh-Hans, en
      static let 杯子颜色 = Rswift.StringResource(key: "杯子颜色", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 氢泡泡应用程序已经是最新版本
      /// 
      /// Locales: zh-Hans, en
      static let 氢泡泡应用程序已经是最新版本 = Rswift.StringResource(key: "氢泡泡应用程序已经是最新版本", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 水杯清洗中
      /// 
      /// Locales: zh-Hans, en
      static let 水杯清洗中 = Rswift.StringResource(key: "水杯清洗中", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 浏览历史
      /// 
      /// Locales: zh-Hans, en
      static let 浏览历史 = Rswift.StringResource(key: "浏览历史", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 消息
      /// 
      /// Locales: zh-Hans, en
      static let 消息 = Rswift.StringResource(key: "消息", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 清洗中
      /// 
      /// Locales: zh-Hans, en
      static let 清洗中 = Rswift.StringResource(key: "清洗中", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 清洗已经完成，請倒掉水和重開水杯
      /// 
      /// Locales: zh-Hans, en
      static let 清洗已经完成請倒掉水和重開水杯 = Rswift.StringResource(key: "清洗已经完成，請倒掉水和重開水杯", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 清洗结束
      /// 
      /// Locales: zh-Hans, en
      static let 清洗结束 = Rswift.StringResource(key: "清洗结束", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 激活成功
      /// 
      /// Locales: zh-Hans, en
      static let 激活成功 = Rswift.StringResource(key: "激活成功", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 激活码错误
      /// 
      /// Locales: zh-Hans, en
      static let 激活码错误 = Rswift.StringResource(key: "激活码错误", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 灯光设置
      /// 
      /// Locales: zh-Hans, en
      static let 灯光设置 = Rswift.StringResource(key: "灯光设置", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 版本信息
      /// 
      /// Locales: zh-Hans, en
      static let 版本信息 = Rswift.StringResource(key: "版本信息", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 玫瑰金
      /// 
      /// Locales: zh-Hans, en
      static let 玫瑰金 = Rswift.StringResource(key: "玫瑰金", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 电解中
      /// 
      /// Locales: zh-Hans, en
      static let 电解中 = Rswift.StringResource(key: "电解中", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 电量低于20%，不能清洗
      /// 
      /// Locales: zh-Hans, en
      static let 电量低于20不能清洗 = Rswift.StringResource(key: "电量低于20%，不能清洗", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 相册
      /// 
      /// Locales: zh-Hans, en
      static let gallery = Rswift.StringResource(key: "Gallery", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 确定
      /// 
      /// Locales: zh-Hans, en
      static let 确定 = Rswift.StringResource(key: "确定", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 秒后重发
      /// 
      /// Locales: zh-Hans, en
      static let 秒后重发 = Rswift.StringResource(key: "秒后重发", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 积分
      /// 
      /// Locales: zh-Hans, en
      static let 积分 = Rswift.StringResource(key: "积分", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 积分商城
      /// 
      /// Locales: zh-Hans, en
      static let 积分商城 = Rswift.StringResource(key: "积分商城", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 签到成功
      /// 
      /// Locales: zh-Hans, en
      static let 签到成功 = Rswift.StringResource(key: "签到成功", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 系统消息
      /// 
      /// Locales: zh-Hans, en
      static let 系统消息 = Rswift.StringResource(key: "系统消息", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 红色
      /// 
      /// Locales: zh-Hans, en
      static let 红色 = Rswift.StringResource(key: "红色", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 绑定失败
      /// 
      /// Locales: zh-Hans, en
      static let 绑定失败 = Rswift.StringResource(key: "绑定失败", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 绑定成功
      /// 
      /// Locales: zh-Hans, en
      static let 绑定成功 = Rswift.StringResource(key: "绑定成功", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 绿色
      /// 
      /// Locales: zh-Hans, en
      static let 绿色 = Rswift.StringResource(key: "绿色", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 蓝色
      /// 
      /// Locales: zh-Hans, en
      static let 蓝色 = Rswift.StringResource(key: "蓝色", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 订单提交成功
      /// 
      /// Locales: zh-Hans, en
      static let 订单提交成功 = Rswift.StringResource(key: "订单提交成功", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 设备
      /// 
      /// Locales: zh-Hans, en
      static let 设备 = Rswift.StringResource(key: "设备", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 设备连接网络中...
      /// 
      /// Locales: zh-Hans, en
      static let 设备连接网络中 = Rswift.StringResource(key: "设备连接网络中...", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 评论
      /// 
      /// Locales: zh-Hans, en
      static let 评论 = Rswift.StringResource(key: "评论", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 请稍候...
      /// 
      /// Locales: zh-Hans, en
      static let 请稍候 = Rswift.StringResource(key: "请稍候...", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 请输入密码!
      /// 
      /// Locales: zh-Hans, en
      static let 请输入密码 = Rswift.StringResource(key: "请输入密码!", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 请输入正确E-mail
      /// 
      /// Locales: zh-Hans, en
      static let 请输入正确EMail = Rswift.StringResource(key: "请输入正确E-mail", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 请输入正确手机号码!
      /// 
      /// Locales: zh-Hans, en
      static let 请输入正确手机号码 = Rswift.StringResource(key: "请输入正确手机号码!", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 请输入激活码
      /// 
      /// Locales: zh-Hans, en
      static let 请输入激活码 = Rswift.StringResource(key: "请输入激活码", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 请输入详细地址
      /// 
      /// Locales: zh-Hans, en
      static let 请输入详细地址 = Rswift.StringResource(key: "请输入详细地址", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 请输入验证码!
      /// 
      /// Locales: zh-Hans, en
      static let 请输入验证码 = Rswift.StringResource(key: "请输入验证码!", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 请选取你杯子的颜色
      /// 
      /// Locales: zh-Hans, en
      static let 请选取你杯子的颜色 = Rswift.StringResource(key: "请选取你杯子的颜色", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 请选择您的收货地址
      /// 
      /// Locales: zh-Hans, en
      static let 请选择您的收货地址 = Rswift.StringResource(key: "请选择您的收货地址", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 请链接设备
      /// 
      /// Locales: zh-Hans, en
      static let 请链接设备 = Rswift.StringResource(key: "请链接设备", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 输入email已经注册
      /// 
      /// Locales: zh-Hans, en
      static let 输入email已经注册 = Rswift.StringResource(key: "输入email已经注册", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 输入密码不一致!
      /// 
      /// Locales: zh-Hans, en
      static let 输入密码不一致 = Rswift.StringResource(key: "输入密码不一致!", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 输入有误
      /// 
      /// Locales: zh-Hans, en
      static let 输入有误 = Rswift.StringResource(key: "输入有误", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 达标天数
      /// 
      /// Locales: zh-Hans, en
      static let 达标天数 = Rswift.StringResource(key: "达标天数", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 连接异常，请重试
      /// 
      /// Locales: zh-Hans, en
      static let 连接异常请重试 = Rswift.StringResource(key: "连接异常，请重试", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 选择图片来源
      /// 
      /// Locales: zh-Hans, en
      static let selectTheSource = Rswift.StringResource(key: "Select the source", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 选择您想进行操作的杯子
      /// 
      /// Locales: zh-Hans, en
      static let 选择您想进行操作的杯子 = Rswift.StringResource(key: "选择您想进行操作的杯子", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 选择杯子
      /// 
      /// Locales: zh-Hans, en
      static let 选择杯子 = Rswift.StringResource(key: "选择杯子", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 金色
      /// 
      /// Locales: zh-Hans, en
      static let 金色 = Rswift.StringResource(key: "金色", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 阅读
      /// 
      /// Locales: zh-Hans, en
      static let 阅读 = Rswift.StringResource(key: "阅读", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      
      /// zh-Hans translation: Email或者密码错误
      /// 
      /// Locales: zh-Hans, en
      static func email或者密码错误(_: Void = ()) -> String {
        return NSLocalizedString("Email或者密码错误", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 今天喝水统计
      /// 
      /// Locales: zh-Hans, en
      static func 今天喝水统计(_: Void = ()) -> String {
        return NSLocalizedString("今天喝水统计", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 保存
      /// 
      /// Locales: zh-Hans, en
      static func 保存(_: Void = ()) -> String {
        return NSLocalizedString("保存", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 保存失败
      /// 
      /// Locales: zh-Hans, en
      static func 保存失败(_: Void = ()) -> String {
        return NSLocalizedString("保存失败", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 保存成功
      /// 
      /// Locales: zh-Hans, en
      static func 保存成功(_: Void = ()) -> String {
        return NSLocalizedString("保存成功", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 停止电解
      /// 
      /// Locales: zh-Hans, en
      static func 停止电解(_: Void = ()) -> String {
        return NSLocalizedString("停止电解", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 元
      /// 
      /// Locales: zh-Hans, en
      static func 元(_: Void = ()) -> String {
        return NSLocalizedString("元", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 关注话题
      /// 
      /// Locales: zh-Hans, en
      static func 关注话题(_: Void = ()) -> String {
        return NSLocalizedString("关注话题", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 删除
      /// 
      /// Locales: zh-Hans, en
      static func 删除(_: Void = ()) -> String {
        return NSLocalizedString("删除", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 刷新中...
      /// 
      /// Locales: zh-Hans, en
      static func 刷新中(_: Void = ()) -> String {
        return NSLocalizedString("刷新中", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 发布成功
      /// 
      /// Locales: zh-Hans, en
      static func 发布成功(_: Void = ()) -> String {
        return NSLocalizedString("发布成功", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 取消
      /// 
      /// Locales: zh-Hans, en
      static func cancel(_: Void = ()) -> String {
        return NSLocalizedString("Cancel", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 取消
      /// 
      /// Locales: zh-Hans, en
      static func 取消(_: Void = ()) -> String {
        return NSLocalizedString("取消", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 可以使用新版本的氢泡泡应用程序，请更新至版本 
      /// 
      /// Locales: zh-Hans, en
      static func 可以使用新版本的氢泡泡应用程序请更新至版本(_: Void = ()) -> String {
        return NSLocalizedString("可以使用新版本的氢泡泡应用程序，请更新至版本 ", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 名字不能为空
      /// 
      /// Locales: zh-Hans, en
      static func 名字不能为空(_: Void = ()) -> String {
        return NSLocalizedString("名字不能为空", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 喝水量
      /// 
      /// Locales: zh-Hans, en
      static func 喝水量(_: Void = ()) -> String {
        return NSLocalizedString("喝水量", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 回复: 
      /// 
      /// Locales: zh-Hans, en
      static func 回复(_: Void = ()) -> String {
        return NSLocalizedString("回复:", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 天
      /// 
      /// Locales: zh-Hans, en
      static func 天(_: Void = ()) -> String {
        return NSLocalizedString("天", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 如果不知道是什么版本？
      /// 
      /// Locales: zh-Hans, en
      static func 如果不知道是什么版本(_: Void = ()) -> String {
        return NSLocalizedString("如果不知道是什么版本？", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 已授权
      /// 
      /// Locales: zh-Hans, en
      static func 已授权(_: Void = ()) -> String {
        return NSLocalizedString("已授权", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 已激活
      /// 
      /// Locales: zh-Hans, en
      static func 已激活(_: Void = ()) -> String {
        return NSLocalizedString("已激活", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 已签到
      /// 
      /// Locales: zh-Hans, en
      static func 已签到(_: Void = ()) -> String {
        return NSLocalizedString("已签到", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 已经发送重置密码的链接到您的E-mail
      /// 
      /// Locales: zh-Hans, en
      static func 已经发送重置密码的链接到您的EMail(_: Void = ()) -> String {
        return NSLocalizedString("已经发送重置密码的链接到您的E-mail", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 已连接
      /// 
      /// Locales: zh-Hans, en
      static func 已连接(_: Void = ()) -> String {
        return NSLocalizedString("已连接", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 开始电解
      /// 
      /// Locales: zh-Hans, en
      static func 开始电解(_: Void = ()) -> String {
        return NSLocalizedString("开始电解", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 忽略此版本
      /// 
      /// Locales: zh-Hans, en
      static func 忽略此版本(_: Void = ()) -> String {
        return NSLocalizedString("忽略此版本", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 总喝水量
      /// 
      /// Locales: zh-Hans, en
      static func 总喝水量(_: Void = ()) -> String {
        return NSLocalizedString("总喝水量", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 您的E-mail未注册
      /// 
      /// Locales: zh-Hans, en
      static func 您的EMail未注册(_: Void = ()) -> String {
        return NSLocalizedString("您的E-mail未注册", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 我的关注
      /// 
      /// Locales: zh-Hans, en
      static func 我的关注(_: Void = ()) -> String {
        return NSLocalizedString("我的关注", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 我的收藏
      /// 
      /// Locales: zh-Hans, en
      static func 我的收藏(_: Void = ()) -> String {
        return NSLocalizedString("我的收藏", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 我的粉丝
      /// 
      /// Locales: zh-Hans, en
      static func 我的粉丝(_: Void = ()) -> String {
        return NSLocalizedString("我的粉丝", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 我的评论
      /// 
      /// Locales: zh-Hans, en
      static func 我的评论(_: Void = ()) -> String {
        return NSLocalizedString("我的评论", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 手动输入
      /// 
      /// Locales: zh-Hans, en
      static func 手动输入(_: Void = ()) -> String {
        return NSLocalizedString("手动输入", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 拍照
      /// 
      /// Locales: zh-Hans, en
      static func camera(_: Void = ()) -> String {
        return NSLocalizedString("Camera", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 探索
      /// 
      /// Locales: zh-Hans, en
      static func 探索(_: Void = ()) -> String {
        return NSLocalizedString("探索", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 提示
      /// 
      /// Locales: zh-Hans, en
      static func 提示(_: Void = ()) -> String {
        return NSLocalizedString("提示", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 数据同步中
      /// 
      /// Locales: zh-Hans, en
      static func 数据同步中(_: Void = ()) -> String {
        return NSLocalizedString("数据同步中", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 新增
      /// 
      /// Locales: zh-Hans, en
      static func 新增(_: Void = ()) -> String {
        return NSLocalizedString("新增", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 新手机号码与当前号码相同!
      /// 
      /// Locales: zh-Hans, en
      static func 新手机号码与当前号码相同(_: Void = ()) -> String {
        return NSLocalizedString("新手机号码与当前号码相同!", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 新的评论
      /// 
      /// Locales: zh-Hans, en
      static func 新的评论(_: Void = ()) -> String {
        return NSLocalizedString("新的评论", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 新获得的赞
      /// 
      /// Locales: zh-Hans, en
      static func 新获得的赞(_: Void = ()) -> String {
        return NSLocalizedString("新获得的赞", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 星期一
      /// 
      /// Locales: zh-Hans, en
      static func 星期一(_: Void = ()) -> String {
        return NSLocalizedString("星期一", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 星期三
      /// 
      /// Locales: zh-Hans, en
      static func 星期三(_: Void = ()) -> String {
        return NSLocalizedString("星期三", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 星期二
      /// 
      /// Locales: zh-Hans, en
      static func 星期二(_: Void = ()) -> String {
        return NSLocalizedString("星期二", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 星期五
      /// 
      /// Locales: zh-Hans, en
      static func 星期五(_: Void = ()) -> String {
        return NSLocalizedString("星期五", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 星期六
      /// 
      /// Locales: zh-Hans, en
      static func 星期六(_: Void = ()) -> String {
        return NSLocalizedString("星期六", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 星期四
      /// 
      /// Locales: zh-Hans, en
      static func 星期四(_: Void = ()) -> String {
        return NSLocalizedString("星期四", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 星期日
      /// 
      /// Locales: zh-Hans, en
      static func 星期日(_: Void = ()) -> String {
        return NSLocalizedString("星期日", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 是否断开连接?
      /// 
      /// Locales: zh-Hans, en
      static func 是否断开连接(_: Void = ()) -> String {
        return NSLocalizedString("是否断开连接?", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 更新
      /// 
      /// Locales: zh-Hans, en
      static func 更新(_: Void = ()) -> String {
        return NSLocalizedString("更新", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 最新收藏
      /// 
      /// Locales: zh-Hans, en
      static func 最新收藏(_: Void = ()) -> String {
        return NSLocalizedString("最新收藏", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 最近一次喝水时间
      /// 
      /// Locales: zh-Hans, en
      static func 最近一次喝水时间(_: Void = ()) -> String {
        return NSLocalizedString("最近一次喝水时间", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 未授权
      /// 
      /// Locales: zh-Hans, en
      static func 未授权(_: Void = ()) -> String {
        return NSLocalizedString("未授权", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 未连接
      /// 
      /// Locales: zh-Hans, en
      static func 未连接(_: Void = ()) -> String {
        return NSLocalizedString("未连接", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 本周喝水状况
      /// 
      /// Locales: zh-Hans, en
      static func 本周喝水状况(_: Void = ()) -> String {
        return NSLocalizedString("本周喝水状况", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 本周喝水统计
      /// 
      /// Locales: zh-Hans, en
      static func 本周喝水统计(_: Void = ()) -> String {
        return NSLocalizedString("本周喝水统计", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 本月喝水状况
      /// 
      /// Locales: zh-Hans, en
      static func 本月喝水状况(_: Void = ()) -> String {
        return NSLocalizedString("本月喝水状况", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 本月喝水统计
      /// 
      /// Locales: zh-Hans, en
      static func 本月喝水统计(_: Void = ()) -> String {
        return NSLocalizedString("本月喝水统计", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 杯
      /// 
      /// Locales: zh-Hans, en
      static func 杯(_: Void = ()) -> String {
        return NSLocalizedString("杯", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 杯子已经被其他账号绑定
      /// 
      /// Locales: zh-Hans, en
      static func 杯子已经被其他账号绑定(_: Void = ()) -> String {
        return NSLocalizedString("杯子已经被其他账号绑定", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 杯子连接网络超时，请确定wifi密码后重试
      /// 
      /// Locales: zh-Hans, en
      static func 杯子连接网络超时请确定wifi密码后重试(_: Void = ()) -> String {
        return NSLocalizedString("杯子连接网络超时，请确定wifi密码后重试", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 杯子颜色
      /// 
      /// Locales: zh-Hans, en
      static func 杯子颜色(_: Void = ()) -> String {
        return NSLocalizedString("杯子颜色", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 氢泡泡应用程序已经是最新版本
      /// 
      /// Locales: zh-Hans, en
      static func 氢泡泡应用程序已经是最新版本(_: Void = ()) -> String {
        return NSLocalizedString("氢泡泡应用程序已经是最新版本", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 水杯清洗中
      /// 
      /// Locales: zh-Hans, en
      static func 水杯清洗中(_: Void = ()) -> String {
        return NSLocalizedString("水杯清洗中", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 浏览历史
      /// 
      /// Locales: zh-Hans, en
      static func 浏览历史(_: Void = ()) -> String {
        return NSLocalizedString("浏览历史", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 消息
      /// 
      /// Locales: zh-Hans, en
      static func 消息(_: Void = ()) -> String {
        return NSLocalizedString("消息", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 清洗中
      /// 
      /// Locales: zh-Hans, en
      static func 清洗中(_: Void = ()) -> String {
        return NSLocalizedString("清洗中", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 清洗已经完成，請倒掉水和重開水杯
      /// 
      /// Locales: zh-Hans, en
      static func 清洗已经完成請倒掉水和重開水杯(_: Void = ()) -> String {
        return NSLocalizedString("清洗已经完成，請倒掉水和重開水杯", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 清洗结束
      /// 
      /// Locales: zh-Hans, en
      static func 清洗结束(_: Void = ()) -> String {
        return NSLocalizedString("清洗结束", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 激活成功
      /// 
      /// Locales: zh-Hans, en
      static func 激活成功(_: Void = ()) -> String {
        return NSLocalizedString("激活成功", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 激活码错误
      /// 
      /// Locales: zh-Hans, en
      static func 激活码错误(_: Void = ()) -> String {
        return NSLocalizedString("激活码错误", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 灯光设置
      /// 
      /// Locales: zh-Hans, en
      static func 灯光设置(_: Void = ()) -> String {
        return NSLocalizedString("灯光设置", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 版本信息
      /// 
      /// Locales: zh-Hans, en
      static func 版本信息(_: Void = ()) -> String {
        return NSLocalizedString("版本信息", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 玫瑰金
      /// 
      /// Locales: zh-Hans, en
      static func 玫瑰金(_: Void = ()) -> String {
        return NSLocalizedString("玫瑰金", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 电解中
      /// 
      /// Locales: zh-Hans, en
      static func 电解中(_: Void = ()) -> String {
        return NSLocalizedString("电解中", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 电量低于20%，不能清洗
      /// 
      /// Locales: zh-Hans, en
      static func 电量低于20不能清洗(_: Void = ()) -> String {
        return NSLocalizedString("电量低于20%，不能清洗", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 相册
      /// 
      /// Locales: zh-Hans, en
      static func gallery(_: Void = ()) -> String {
        return NSLocalizedString("Gallery", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 确定
      /// 
      /// Locales: zh-Hans, en
      static func 确定(_: Void = ()) -> String {
        return NSLocalizedString("确定", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 秒后重发
      /// 
      /// Locales: zh-Hans, en
      static func 秒后重发(_: Void = ()) -> String {
        return NSLocalizedString("秒后重发", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 积分
      /// 
      /// Locales: zh-Hans, en
      static func 积分(_: Void = ()) -> String {
        return NSLocalizedString("积分", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 积分商城
      /// 
      /// Locales: zh-Hans, en
      static func 积分商城(_: Void = ()) -> String {
        return NSLocalizedString("积分商城", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 签到成功
      /// 
      /// Locales: zh-Hans, en
      static func 签到成功(_: Void = ()) -> String {
        return NSLocalizedString("签到成功", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 系统消息
      /// 
      /// Locales: zh-Hans, en
      static func 系统消息(_: Void = ()) -> String {
        return NSLocalizedString("系统消息", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 红色
      /// 
      /// Locales: zh-Hans, en
      static func 红色(_: Void = ()) -> String {
        return NSLocalizedString("红色", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 绑定失败
      /// 
      /// Locales: zh-Hans, en
      static func 绑定失败(_: Void = ()) -> String {
        return NSLocalizedString("绑定失败", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 绑定成功
      /// 
      /// Locales: zh-Hans, en
      static func 绑定成功(_: Void = ()) -> String {
        return NSLocalizedString("绑定成功", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 绿色
      /// 
      /// Locales: zh-Hans, en
      static func 绿色(_: Void = ()) -> String {
        return NSLocalizedString("绿色", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 蓝色
      /// 
      /// Locales: zh-Hans, en
      static func 蓝色(_: Void = ()) -> String {
        return NSLocalizedString("蓝色", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 订单提交成功
      /// 
      /// Locales: zh-Hans, en
      static func 订单提交成功(_: Void = ()) -> String {
        return NSLocalizedString("订单提交成功", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 设备
      /// 
      /// Locales: zh-Hans, en
      static func 设备(_: Void = ()) -> String {
        return NSLocalizedString("设备", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 设备连接网络中...
      /// 
      /// Locales: zh-Hans, en
      static func 设备连接网络中(_: Void = ()) -> String {
        return NSLocalizedString("设备连接网络中...", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 评论
      /// 
      /// Locales: zh-Hans, en
      static func 评论(_: Void = ()) -> String {
        return NSLocalizedString("评论", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 请稍候...
      /// 
      /// Locales: zh-Hans, en
      static func 请稍候(_: Void = ()) -> String {
        return NSLocalizedString("请稍候...", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 请输入密码!
      /// 
      /// Locales: zh-Hans, en
      static func 请输入密码(_: Void = ()) -> String {
        return NSLocalizedString("请输入密码!", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 请输入正确E-mail
      /// 
      /// Locales: zh-Hans, en
      static func 请输入正确EMail(_: Void = ()) -> String {
        return NSLocalizedString("请输入正确E-mail", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 请输入正确手机号码!
      /// 
      /// Locales: zh-Hans, en
      static func 请输入正确手机号码(_: Void = ()) -> String {
        return NSLocalizedString("请输入正确手机号码!", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 请输入激活码
      /// 
      /// Locales: zh-Hans, en
      static func 请输入激活码(_: Void = ()) -> String {
        return NSLocalizedString("请输入激活码", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 请输入详细地址
      /// 
      /// Locales: zh-Hans, en
      static func 请输入详细地址(_: Void = ()) -> String {
        return NSLocalizedString("请输入详细地址", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 请输入验证码!
      /// 
      /// Locales: zh-Hans, en
      static func 请输入验证码(_: Void = ()) -> String {
        return NSLocalizedString("请输入验证码!", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 请选取你杯子的颜色
      /// 
      /// Locales: zh-Hans, en
      static func 请选取你杯子的颜色(_: Void = ()) -> String {
        return NSLocalizedString("请选取你杯子的颜色", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 请选择您的收货地址
      /// 
      /// Locales: zh-Hans, en
      static func 请选择您的收货地址(_: Void = ()) -> String {
        return NSLocalizedString("请选择您的收货地址", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 请链接设备
      /// 
      /// Locales: zh-Hans, en
      static func 请链接设备(_: Void = ()) -> String {
        return NSLocalizedString("请链接设备", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 输入email已经注册
      /// 
      /// Locales: zh-Hans, en
      static func 输入email已经注册(_: Void = ()) -> String {
        return NSLocalizedString("输入email已经注册", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 输入密码不一致!
      /// 
      /// Locales: zh-Hans, en
      static func 输入密码不一致(_: Void = ()) -> String {
        return NSLocalizedString("输入密码不一致!", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 输入有误
      /// 
      /// Locales: zh-Hans, en
      static func 输入有误(_: Void = ()) -> String {
        return NSLocalizedString("输入有误", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 达标天数
      /// 
      /// Locales: zh-Hans, en
      static func 达标天数(_: Void = ()) -> String {
        return NSLocalizedString("达标天数", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 连接异常，请重试
      /// 
      /// Locales: zh-Hans, en
      static func 连接异常请重试(_: Void = ()) -> String {
        return NSLocalizedString("连接异常，请重试", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 选择图片来源
      /// 
      /// Locales: zh-Hans, en
      static func selectTheSource(_: Void = ()) -> String {
        return NSLocalizedString("Select the source", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 选择您想进行操作的杯子
      /// 
      /// Locales: zh-Hans, en
      static func 选择您想进行操作的杯子(_: Void = ()) -> String {
        return NSLocalizedString("选择您想进行操作的杯子", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 选择杯子
      /// 
      /// Locales: zh-Hans, en
      static func 选择杯子(_: Void = ()) -> String {
        return NSLocalizedString("选择杯子", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 金色
      /// 
      /// Locales: zh-Hans, en
      static func 金色(_: Void = ()) -> String {
        return NSLocalizedString("金色", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 阅读
      /// 
      /// Locales: zh-Hans, en
      static func 阅读(_: Void = ()) -> String {
        return NSLocalizedString("阅读", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try shop.validate()
      try attachmentDetailsViewController.validate()
      try launchScreen.validate()
    }
    
    struct attachmentDetailsViewController: Rswift.StoryboardResourceType, Rswift.Validatable {
      let attachmentDetailsViewController = StoryboardViewControllerResource<AttachmentDetailsViewController>(identifier: "AttachmentDetailsViewController")
      let bundle = R.hostingBundle
      let name = "AttachmentDetailsViewController"
      
      func attachmentDetailsViewController(_: Void = ()) -> AttachmentDetailsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: attachmentDetailsViewController)
      }
      
      static func validate() throws {
        if _R.storyboard.attachmentDetailsViewController().attachmentDetailsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'attachmentDetailsViewController' could not be loaded from storyboard 'AttachmentDetailsViewController' as 'AttachmentDetailsViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if UIKit.UIImage(named: "1242-1") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named '1242-1' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct shop: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let crowdfoudingBuyBtnVC = StoryboardViewControllerResource<CrowdfoudingBuyBtnVC>(identifier: "CrowdfoudingBuyBtnVC")
      let crowdfundingShopDetailVC = StoryboardViewControllerResource<CrowdfundingShopDetailVC>(identifier: "CrowdfundingShopDetailVC")
      let crowfoudingBuyVC = StoryboardViewControllerResource<CrowfoudingBuyVC>(identifier: "CrowfoudingBuyVC")
      let exchangeBuyBtnVC = StoryboardViewControllerResource<ExchangeBuyBtnVC>(identifier: "ExchangeBuyBtnVC")
      let exchangeBuyVC = StoryboardViewControllerResource<ExchangeBuyVC>(identifier: "ExchangeBuyVC")
      let exchangeNewBuyVC = StoryboardViewControllerResource<ExchangeNewBuyVC>(identifier: "ExchangeNewBuyVC")
      let exchangeShopDetailVC = StoryboardViewControllerResource<ExchangeShopDetailVC>(identifier: "ExchangeShopDetailVC")
      let name = "Shop"
      let scoresBuyBtnVC = StoryboardViewControllerResource<ScoresBuyBtnVC>(identifier: "ScoresBuyBtnVC")
      let scoresBuyVC = StoryboardViewControllerResource<ScoresBuyVC>(identifier: "ScoresBuyVC")
      let scoresShopDetailVC = StoryboardViewControllerResource<ScoresShopDetailVC>(identifier: "ScoresShopDetailVC")
      
      func crowdfoudingBuyBtnVC(_: Void = ()) -> CrowdfoudingBuyBtnVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: crowdfoudingBuyBtnVC)
      }
      
      func crowdfundingShopDetailVC(_: Void = ()) -> CrowdfundingShopDetailVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: crowdfundingShopDetailVC)
      }
      
      func crowfoudingBuyVC(_: Void = ()) -> CrowfoudingBuyVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: crowfoudingBuyVC)
      }
      
      func exchangeBuyBtnVC(_: Void = ()) -> ExchangeBuyBtnVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: exchangeBuyBtnVC)
      }
      
      func exchangeBuyVC(_: Void = ()) -> ExchangeBuyVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: exchangeBuyVC)
      }
      
      func exchangeNewBuyVC(_: Void = ()) -> ExchangeNewBuyVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: exchangeNewBuyVC)
      }
      
      func exchangeShopDetailVC(_: Void = ()) -> ExchangeShopDetailVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: exchangeShopDetailVC)
      }
      
      func scoresBuyBtnVC(_: Void = ()) -> ScoresBuyBtnVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: scoresBuyBtnVC)
      }
      
      func scoresBuyVC(_: Void = ()) -> ScoresBuyVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: scoresBuyVC)
      }
      
      func scoresShopDetailVC(_: Void = ()) -> ScoresShopDetailVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: scoresShopDetailVC)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "closeBtn") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'closeBtn' is used in storyboard 'Shop', but couldn't be loaded.") }
        if UIKit.UIImage(named: "资源 21") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named '资源 21' is used in storyboard 'Shop', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btnBg") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btnBg' is used in storyboard 'Shop', but couldn't be loaded.") }
        if UIKit.UIImage(named: "arrow") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'arrow' is used in storyboard 'Shop', but couldn't be loaded.") }
        if UIKit.UIImage(named: "cup") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'cup' is used in storyboard 'Shop', but couldn't be loaded.") }
        if _R.storyboard.shop().scoresBuyVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'scoresBuyVC' could not be loaded from storyboard 'Shop' as 'ScoresBuyVC'.") }
        if _R.storyboard.shop().scoresBuyBtnVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'scoresBuyBtnVC' could not be loaded from storyboard 'Shop' as 'ScoresBuyBtnVC'.") }
        if _R.storyboard.shop().scoresShopDetailVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'scoresShopDetailVC' could not be loaded from storyboard 'Shop' as 'ScoresShopDetailVC'.") }
        if _R.storyboard.shop().exchangeBuyVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'exchangeBuyVC' could not be loaded from storyboard 'Shop' as 'ExchangeBuyVC'.") }
        if _R.storyboard.shop().crowfoudingBuyVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'crowfoudingBuyVC' could not be loaded from storyboard 'Shop' as 'CrowfoudingBuyVC'.") }
        if _R.storyboard.shop().exchangeNewBuyVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'exchangeNewBuyVC' could not be loaded from storyboard 'Shop' as 'ExchangeNewBuyVC'.") }
        if _R.storyboard.shop().exchangeBuyBtnVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'exchangeBuyBtnVC' could not be loaded from storyboard 'Shop' as 'ExchangeBuyBtnVC'.") }
        if _R.storyboard.shop().exchangeShopDetailVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'exchangeShopDetailVC' could not be loaded from storyboard 'Shop' as 'ExchangeShopDetailVC'.") }
        if _R.storyboard.shop().crowdfoudingBuyBtnVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'crowdfoudingBuyBtnVC' could not be loaded from storyboard 'Shop' as 'CrowdfoudingBuyBtnVC'.") }
        if _R.storyboard.shop().crowdfundingShopDetailVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'crowdfundingShopDetailVC' could not be loaded from storyboard 'Shop' as 'CrowdfundingShopDetailVC'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
